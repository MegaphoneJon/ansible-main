---
- name: Create vhost conf (Apache)
  template:
    src: templates/vhost.conf.j2
    dest: /etc/apache2/sites-available/{{ item.key }}.conf
  with_dict: "{{ sites }}"
  notify: restart apache
  loop_control:
    label: "{{ item.key }}"

- name: Enable the site (Apache)
  file:
    src: /etc/apache2/sites-available/{{ item.key }}.conf
    dest: /etc/apache2/sites-enabled/{{ item.key }}.conf
    state: link
  with_dict: "{{ sites }}"
  notify: restart apache
  loop_control:
    label: "{{ item.key }}"

- name: Update /etc/hosts
  lineinfile:
    path: /etc/hosts
    regexp: "^127\\.0\\.0\\.1 {{ item.value.bare_url }}"
    line: "127.0.0.1 {{ item.value.bare_url }}"
  become_user: root
  with_dict: "{{ sites }}"
  loop_control:
    label: "{{ item.key }}"

- name: Check if repos exist on gogs - create if not
  uri:
    url: https://git.megaphonetech.com/api/v1/org/{{ item.value.git_repo_owner }}/repos
    method: POST
    headers:
      Authorization: token {{ lookup('passwordstore', 'megaphone/gogs/api') }}
    body:
      name: "{{ item.value.git_repo_name }}"
      description: "Repo for {{ item.value.git_repo_name }}"
      private: true
    body_format: json
  with_dict: "{{ sites }}"
  register: create_gogs_repo
  failed_when: not(create_gogs_repo.status == 201 or create_gogs_repo.status == 422)
  loop_control:
    label: "{{ item.key }}"

- name: Create the folder hierarchy
  file:
    path: "{{ item.value.gitroot }}"
    state: directory
    mode: 02770
    owner: "{{ ansible_user }}"
    group: "{{ item.value.run_as_user }}"
  become_user: root
  with_dict: "{{ sites }}"
  loop_control:
    label: "{{ item.key }}"

# MySQL
- name: Create CMS database
  mysql_db:
    name: "{{ item.value.cms_db_name }}"
    state: present
  with_dict: "{{ sites }}"
  loop_control:
    label: "{{ item.key }}"

- name: Create CRM database
  mysql_db:
    name: "{{ item.value.crm_db_name }}"
    state: present
  when: item.value.civicrm == 'Yes'
  with_dict: "{{ sites }}"
  loop_control:
    label: "{{ item.key }}"

- name: Create MySQL User and set db permissions
  mysql_user:
    name: "{{ item.value.db_user }}"
    password: "{{ lookup('passwordstore', item.value.client + '/' + hostname + '/' + item.value.bare_url + '/mysql create=true length=32') }}"
    priv: "{{ item.value.cms_db_name }}.*:SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,INDEX,ALTER,LOCK TABLES,CREATE TEMPORARY TABLES,CREATE VIEW/{{ item.value.crm_db_name }}.*:SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,INDEX,ALTER,LOCK TABLES,CREATE TEMPORARY TABLES,TRIGGER,CREATE ROUTINE,ALTER ROUTINE,CREATE VIEW,REFERENCES{% if item.value.crm_logging_db_name|default('blank', True) != 'blank' %}/{{ item.value.crm_logging_db_name }}.*:SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,INDEX,ALTER,LOCK TABLES,CREATE TEMPORARY TABLES,TRIGGER,CREATE ROUTINE,ALTER ROUTINE,CREATE VIEW,REFERENCES{% endif %}"
    host: 'localhost'
    state: present
  with_dict: "{{ sites }}"
  loop_control:
    label: "{{ item.key }}"

# If create_gogs_repo.results.status is 422, the repo existed already.  If 201, it was just created.
# Build a new WP site
- include_tasks: blank-wp.yml
  with_items: "{{ create_gogs_repo.results }}"
  become_user: "{{ ansible_user }}"
  when: item.status == 201 and item.item.value.cms == 'WordPress'
  loop_control:
    label: "{{ item.item.key }}"

# Tasks for blank sites regardless of CMS
- include_tasks: blank-site.yml
  with_items: "{{ create_gogs_repo.results }}"
  become_user: "{{ ansible_user }}"
  when: item.status == 201
  loop_control:
    label: "{{ item.item.key }}"

# TODO
# Next 3 steps ensure the Ansible user's deploy key is on each gogs repo

# For internal (git.megaphonetech.com) repos
- include_tasks: internal-git.yml
  with_items: "{{ create_gogs_repo.results }}"
  become_user: "{{ ansible_user }}"
  when: item.status == 422
  loop_control:
    label: "{{ item.item.key }}"
