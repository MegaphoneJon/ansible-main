- name: Show the site in question
  debug:
    msg: Operating on "{{ item.item.key }}"

- name: Get the home directory
  user:
    name: "{{ item.item.value.run_as_user }}"
  register: userinfo

# Add any hosts that submodules might come from via SSH - e.g. github
- name: Add keys to web user known_hosts
  known_hosts:
    name: "{{ inner_item.host }}"
    key: "{{ inner_item.key }}"
  loop_control:
    loop_var: inner_item
  with_items:
    - { host: "[git.megaphonetech.com]:10022", key: "[git.megaphonetech.com]:10022 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDgNwIe3TBtRHtkwoHL2TG84/f039hgzqVbN0z4sk1UHPZr4rxFinGCGjedzE+adVucqr/gemPnETfashTujcPyZZkwPn2dQNx0HuPHw3H+cqXqKt03fsgPcerqsqvFS509pcblmP5vtJLF4uVgbh6TLmZiObMuiIYe9VTyZSXo67DTt/K6SSgwyUFldqJIJQA+DO1nXoSYSJ4fP1DDPdue0RTL06VtlnUL2w9iHrOgVRY1KqAtpnGRslKx5c3L8+9EBMdJWM1CPK11vkvyf8LnYwuCH4V7w0rVs2QAE9Abm4g4HiE4wql5QJrjCi/cq/1doeY9KXxFb8SOTtZBk5Nn" }
    - { host: "[git.megaphonetech.com]:10022", key: "[git.megaphonetech.com]:10022 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBLuEP2fW8Eycdbeo0XWihr63zj6yCTcCjxh4C4i3c8p2O44mKRjVhxOSSBQQxZNUKeJYAGTuWh+EPW71KADzXv0=" }
    - { host: "[git.megaphonetech.com]:10022", key: "[git.megaphonetech.com]:10022 ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJoN1UsqLqucSJo4dSum6Xy2qCrlutDAu3wPdprAL4w" }
    - { host: "github.com", key: "github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==" }
    - { host: "[git.colet.space]:10022", key: "[git.colet.space]:10022 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCotp3vQdI4NZStUFeFzj7LExAyPBbKOe+97wY2Mx0f4U3ZtyYn1AGhfWiccp5jzkM3kE6Nq/iaJWVZ02JxSAQxsGgh7fn7vCzNnv7FJAFmEXC9QvV3RfjwTLAfPXd6FdPsl4bmXhabTgifbWHUujnC1yoktjgbTk0oXJ/tGJ0Xi7s3vGMKCqOQsjpNeBtyuL3ik43h4HJHgMs0GAgNNrdOcDr10dl9/6quWZOGgNfShrzHTn+Ms7zI8kavD1xBtgNIfKdXPBn8A3hglQrttIj5XxBGQ2oS+ArizvGiZrRS5yQ89ZmJ0xNjEjxiO8do2X5GQqFLnVZVWwiOj7Qd4HVB" }


- name: Get the web user's SSH key
  slurp:
    src: "{{ userinfo.home }}/.ssh/id_rsa.pub"
  register: key

# Gogs thinks the key exists if the title matches an existing key.
# So we hash the key to add to the title.
- name: Get a key hash
  set_fact:
    key_md5: "{{ key['content'] | b64decode | md5 }}"

# Deploy keys are read/write on trusted servers, read-only otherwise.
- name: Set up deploy keys on gitea
  uri:
    url: https://git.megaphonetech.com/api/v1/repos/{{ item.item.value.git_repo_owner + '/' + item.item.value.git_repo_name }}/keys
    method: POST
    body_format: json
    body:
      title: "{{ item.item.value.run_as_user + '@' + inventory_hostname_short + ' ' + key_md5 }}"
      key: "{{ key['content'] | b64decode }}"
      read_only: "{{ (item.item.value.trusted_server == '1') | ternary(false, true) }}"
    headers:
      Authorization: token {{ lookup('passwordstore', 'megaphone/gogs/api') }}
  register: gogs_result
  changed_when: gogs_result.status == 201
  failed_when: gogs_result.status != 201 and not (gogs_result.json is defined and gogs_result.json.message is defined and gogs_result.json.message | search("public key already exists"))

- name: clone an existing site
  git:
    repo: "{{ item.item.value.git_repo_url }}"
    dest: "{{ item.item.value.gitroot }}"
    version: master
    umask: "0007"
    track_submodules: no

- name: Create CiviCRM uploads folder
  file:
    path: "{{ item.item.value.civicrm_settings_php_path }}"
    state: directory
  when: item.item.value.civicrm == 'Yes'

# MySQL restore
- name: Create sql-dumps folder
  file:
    owner: "{{ item.item.value.run_as_user }}"
    group: "{{ item.item.value.run_as_user }}"
    path: "{{ item.item.value.webroot }}/../sql-dumps"
    state: directory
    mode: 02770
  become_user: root

- name: Check if db dump files already exist
  stat:
    path: "{{ item.item.value.webroot }}/../sql-dumps/{{ item.item.value.canonical_cms_db_name }}.sql"
  register: db_dump_exists

# This is so fucking ugly. Newer versions of borgbackup eliminate the need for piping to tail and cut, but we probably won't have them until Debian 10 ships.
- name: Get the latest backup archive name
  shell: borg list --remote-path /usr/local/bin/borg1/borg1 8139@usw-s008.rsync.net:{{ item.item.value.canonical_server_client + '-' + item.item.value.canonical_hostname }} | tail -n1 | cut -f 1 -d ' '
  environment:
    BORG_PASSPHRASE: "{{ lookup('passwordstore', item.item.value.canonical_server_client + '/' + item.item.value.canonical_hostname + '/borg/remote') }}"
  args:
    chdir: "{{ item.item.value.webroot }}/../sql-dumps"
    # Doesn't really create this file, but we want to skip if the file exists
    creates: "{{ item.item.value.canonical_cms_db_name }}.sql"
  register: archive_name
  changed_when: false
  when: db_dump_exists.stat.exists == false and item.item.value.canonical_hostname
  become_user: root

# Download the borg backup of the db dump if we don't have a db dump already and the borg backup exists.
- name: Download the latest copy of the database
  shell: borg extract --strip-components 4 --remote-path /usr/local/bin/borg1/borg1 8139@usw-s008.rsync.net:{{ item.item.value.canonical_server_client + '-' + item.item.value.canonical_hostname }}::{{ archive_name.stdout }} var/backups/mysql/sqldump/{{ db_name }}
  args:
    chdir: "{{ item.item.value.webroot }}/../sql-dumps"
    creates: "{{ db_name }}"
  environment:
    BORG_PASSPHRASE: "{{ lookup('passwordstore', item.item.value.canonical_server_client + '/' + item.item.value.canonical_hostname + '/borg/remote') }}"
  with_items:
    - "{{ item.item.value.canonical_crm_db_name }}.sql"
    - "{{ item.item.value.canonical_cms_db_name }}.sql"
  register: db_downloaded
  loop_control:
    loop_var: db_name
  when: archive_name.skipped is not defined
  become_user: root

# Don't do these other steps if a) there's no db backup in borg b) the db is already downloaded.
# FIXME: We don't have a way of telling whether the db dump has been loaded or not, which is what we really need.  Figure out a command to determine that, then change the "when" on the next 3 tasks.
- name: Remove definers from Civi db
  command: perl -pi -e 's#\/\*\!5001. DEFINER=`.*`@`.*?\*\/##g' {{ item.item.value.canonical_crm_db_name }}.sql
  args:
    chdir: "{{ item.item.value.webroot }}/../sql-dumps"
  when: (archive_name.skipped is not defined and db_downloaded.changed) or db_dump_exists.stat.exists == true

- name: Fix logging db triggers when using a separate db
  command: perl -pi -e 's/{{ item.item.value.canonical_crm_logging_db_name }}/{{ item.item.value.crm_logging_db_name }}/g' {{ item.item.value.canonical_crm_db_name }}.sql
  args:
    chdir: "{{ item.item.value.webroot }}/../sql-dumps"
  when: (archive_name.skipped is not defined and db_downloaded.changed) or db_dump_exists.stat.exists == true and item.item.value.canonical_crm_logging_db_name

- name: Import the CMS database
  mysql_db:
    name: "{{ item.item.value.cms_db_name }}"
    target: "{{ item.item.value.webroot}}/../sql-dumps/{{ item.item.value.canonical_cms_db_name }}.sql"
    state: import
    login_user: "{{ item.item.value.db_user }}"
    login_password: "{{ lookup('passwordstore', item.item.value.client + '/' + hostname + '/' + item.item.value.bare_url + '/mysql') }}"
  when: (archive_name.skipped is not defined and db_downloaded.changed) or db_dump_exists.stat.exists == true

- name: Do a search/replace for the primary URL
  command: "wp search-replace {{ item.item.value.canonical_primary_url }} {{ item.item.value.primary_url }}"
  args:
    chdir: "{{ item.item.value.webroot }}"
  when: item.item.value.cms == 'WordPress' and item.item.value.canonical_primary_url

- name: Import the Civi database
  mysql_db:
    name: "{{ item.item.value.crm_db_name }}"
    target: "{{ item.item.value.webroot}}/../sql-dumps/{{ item.item.value.canonical_crm_db_name }}.sql"
    state: import
    login_user: "{{ item.item.value.db_user }}"
    login_password: "{{ lookup('passwordstore', item.item.value.client + '/' + hostname + '/' + item.item.value.bare_url + '/mysql') }}"
  when: (archive_name.skipped is not defined and db_downloaded.changed) or db_dump_exists.stat.exists == true

- name: Add civicrm.settings.php
  template:
    src: templates/civicrm.settings.j2
    dest: "{{ item.item.value.civicrm_settings_php_path }}/civicrm.settings.php"
    owner: "{{ item.item.value.run_as_user }}"
    group: "{{ item.item.value.run_as_user }}"
    mode: 0660
  become_user: root

- name: Get table names for Views integration
  command: "mysql -u{{ item.item.value.db_user }} -p{{ lookup('passwordstore', item.item.value.client + '/' + hostname + '/' + item.item.value.bare_url + '/mysql') }} {{ item.item.value.crm_db_name }} --skip-column-names --silent -e 'show tables'"
  register: civi_table_names
  when: item.item.value.cms == 'Drupal' or item.item.value.cms == 'Backdrop'
  changed_when: false

#TODO: Create a settings template for Backdrop
#TODO: Create the config folders for Backdrop with appropriate owner/perms
# config/active, config/staging, both owned/writable by run_as_user

- name: Add settings.php
  template:
    src: templates/settings.j2
    dest: "{{ item.item.value.webroot }}/sites/default/settings.php"
    owner: "{{ item.item.value.run_as_user }}"
    group: "{{ item.item.value.run_as_user }}"
  when: item.item.value.cms == 'Drupal'
  become_user: root

- name: Create wp-config.php
  shell: |
    wp config create --dbname={{ item.item.value.cms_db_name }} --dbuser={{ item.item.value.db_user }} --dbpass={{ lookup('passwordstore', item.item.value.client + '/' + hostname + '/' + item.item.value.bare_url + '/mysql') }} {% if item.item.value.cms_table_prefix|default('blank', True) != 'blank' %}--dbprefix={{ item.item.value.cms_table_prefix}}{% endif %} --path={{ item.item.value.webroot }} --extra-php <<PHP
    define( 'WP_SITEURL', '{{ item.item.value.primary_url }}' );
  args:
    creates: "{{ item.item.value.webroot }}/wp-config.php"
  when: item.item.value.cms == 'WordPress'

- name: Set group write permissions on CiviCRM folders
  file:
    path: "{{ item.item.value.civicrm_files_path }}"
    state: directory
    mode: g+w
    recurse: yes
  become_user: root
