# sudo pip2 install python-linode
- name: Provision a Linode VM
  linode:
    api_key: "{{ lookup('passwordstore', 'linode/apikey') }}"
    name: "{{ inventory_hostname_short }}"
    linode_id: "{{ linode_id }}"
    plan: "{{ linode_plan }}"
    # Newark, NJ
    datacenter: 6
    # Debian 9
    distribution: 158
    swap: 256
    # This should use your primary public key.  Others will be added post-provision.
    ssh_pub_key: "{{ lookup('file', 'files/id_rsa.pub') }}"
    wait: yes
    wait_timeout: 600
    state: present
  when: hosting_company == "Linode" and linode_plan > 0
  register: linode

# Next two steps update crm.megaphonetech.com/server-list
- name: Login to Drupal Inventory
  uri:
    url: "{{ inventory_rest_endpoint }}user/login.json"
    headers:
      X-CSRF-Token: token.json.token
    body:
      username: "{{ inventory_username }}"
      password: "{{ lookup('passwordstore', 'megaphone/crm/restpassword') }}"
    method: POST
    body_format: json
  when: hosting_company == "Linode" and linode_plan > 0
  register: login

- name: update the inventory node with linode ID and IP address
  uri:
    url: "{{ inventory_rest_endpoint }}node/{{ nid }}.json"
    headers:
      X-CSRF-Token: "{{ login.json.token }}"
      Cookie: "{{ login.json.session_name }}={{login.json.sessid}}"
    method: PUT
    body_format: json
    body:
      field_ipv4_address:
        und:
          0:
            end: "{{ linode.instance.ipv4 }}"
            start: "{{ linode.instance.ipv4 }}"
      field_linode_id:
        und:
          0:
            value: "{{ linode.instance.id }}"
  when: hosting_company == "Linode" and linode_plan > 0

# Next two steps add DNS
- name: Add new host to in-memory inventory
  add_host:
    hostname: "{{ linode.instance.ipv4 }}"
    groupname: "linode"
    ansible_user: root
  when: linode.instance.id|string != linode_id|string

- name: Update MFPL DNS
  local_action: command php "{{ inventory_dir }}/helpers/mfplapi.php" "{{ inventory_hostname }}" "{{ linode.instance.ipv4 }}"
  with_items: groups['linode']
  register: dnshelper_result
  when: linode.instance is defined
  changed_when: "dnshelper_result.stdout != 'DNS already exists and is correct.'"
